V=$r1@<benchmark.Philo: main(java.lang.String[])> H=benchmark/Philo.java:53: $r1 = new benchmark.Table
V=r2@<benchmark.Philo: main(java.lang.String[])> H=benchmark/Philo.java:53: $r1 = new benchmark.Table
V=r3@<benchmark.Philo: main(java.lang.String[])> H=benchmark/Philo.java:54: r3 = new benchmark.Philo[]
V=r0@<benchmark.Philo: <init>(int,benchmark.Table)> H=benchmark/Philo.java:56: $r4_1 = new benchmark.Philo
V=r1@<benchmark.Philo: <init>(int,benchmark.Table)> H=benchmark/Philo.java:53: $r1 = new benchmark.Table
V=r0@<benchmark.Philo: run()> H=benchmark/Philo.java:56: $r4_1 = new benchmark.Philo
V=dummy_java.lang.Class_1579@<benchmark.Philo: <clinit>()> H=benchmark/Philo.java:0: dummy_java.lang.Class_1579 = new java.lang.Class
V=r0@<benchmark.Philo: run()> H=benchmark/Philo.java:56: $r4_1 = new benchmark.Philo
V=$r1_1@<benchmark.Philo: run()> H=benchmark/Philo.java:53: $r1 = new benchmark.Table
V=$r2_1@<benchmark.Philo: run()> H=benchmark/Philo.java:53: $r1 = new benchmark.Table
V=r3@<benchmark.Philo: main(java.lang.String[])> H=benchmark/Philo.java:54: r3 = new benchmark.Philo[]
V=r2@<benchmark.Philo: main(java.lang.String[])> H=benchmark/Philo.java:53: $r1 = new benchmark.Table
V=$r4_1@<benchmark.Philo: main(java.lang.String[])> H=benchmark/Philo.java:56: $r4_1 = new benchmark.Philo
V=$r5_1@<benchmark.Philo: main(java.lang.String[])> H=benchmark/Philo.java:56: $r4_1 = new benchmark.Philo
V=r3@<benchmark.Philo: main(java.lang.String[])> H=benchmark/Philo.java:54: r3 = new benchmark.Philo[]
V=$r6_1@<benchmark.Philo: main(java.lang.String[])> H=benchmark/Philo.java:56: $r4_1 = new benchmark.Philo
V=r0@<benchmark.Table: <init>()> H=benchmark/Philo.java:53: $r1 = new benchmark.Table
V=$r1@<benchmark.Table: <init>()> H=benchmark/Philo.java:8: $r1 = new boolean[]
V=r0@<benchmark.Table: getForks(int)> H=benchmark/Philo.java:53: $r1 = new benchmark.Table
V=$r3@<benchmark.Table: getForks(int)> H=benchmark/Philo.java:8: $r1 = new boolean[]
V=$r4@<benchmark.Table: getForks(int)> H=benchmark/Philo.java:8: $r1 = new boolean[]
V=r0@<benchmark.Table: putForks(int)> H=benchmark/Philo.java:53: $r1 = new benchmark.Table
V=$r1@<benchmark.Table: putForks(int)> H=benchmark/Philo.java:8: $r1 = new boolean[]
V=$r2@<benchmark.Table: putForks(int)> H=benchmark/Philo.java:8: $r1 = new boolean[]
V=dummy_java.lang.Class_1384@<benchmark.Table: <clinit>()> H=benchmark/Philo.java:0: dummy_java.lang.Class_1384 = new java.lang.Class
V=r0@<benchmark.Table: <init>()> H=benchmark/Philo.java:53: $r1 = new benchmark.Table
V=$r2_1@<benchmark.Table: <init>()> H=benchmark/Philo.java:8: $r1 = new boolean[]
V=r0@<benchmark.Table: getForks(int)> H=benchmark/Philo.java:53: $r1 = new benchmark.Table
V=$r1_1@<benchmark.Table: getForks(int)> H=benchmark/Philo.java:8: $r1 = new boolean[]
V=$r2_1@<benchmark.Table: getForks(int)> H=benchmark/Philo.java:8: $r1 = new boolean[]
