# context-insensitive pointer analysis with call graph construction
# name=pa-dlog

.include "T.dom"
.include "F.dom"
.include "M.dom"
.include "I.dom"
.include "H.dom"
.include "V.dom"
.include "Z.dom"

.bddvarorder F0_I0xM0xM1_T0_V0xV1_T1_H0_H1_Z0

###
# Input/Output Relations
###

VHfilter(v:V0,h:H0) input
HT(h:H0,t:T1) input
cha(n:M1,t:T1,m:M0) input
sub(t1:T1,t2:T0) input
MmethArg(m:M0,n:Z0,v:V0) input
MmethRet(m:M0,n:Z0,v:V1) input
IinvkArg(i:I0,n:Z0,v:V1) input
IinvkRet(i:I0,n:Z0,v:V0) input
MI(m:M0,i:I0) input
statIM(i:I0,m:M0) input
specIM(i:I0,m:M0) input
virtIM(i:I0,m:M0) input
MobjValAsgnInst(m:M0,l:V0,h:H0) input
MobjVarAsgnInst(m:M0,l:V0,r:V1) input
MgetInstFldInst(m:M0,l:V0,f:F0,b:V1) input
MputInstFldInst(m:M0,b:V0,f:F0,r:V1) input
MgetStatFldInst(m:M0,l:V0,f:F0) input
MputStatFldInst(m:M0,f:F0,r:V0) input
clinitM(m:M0) input

VH(v:V0,h:H0) output
FH(f:F0,h:H0) output
HFH(h1:H0,f:F0,h2:H1) output
IM(i:I0,m:M0) output

###
# Intermediate Relations
###

# cs265: declare any relations here that you want to store
# intermediate results.  Qualify them as output relations
# (just as VH, FH, HFH, and IM above) so that you can debug
# their contents.  Alternatively, you can leave them
# unqualified.

###
# Constraints
###

# cs265: write Datalog rules here specifying how to compute
# output relations from the input relations


